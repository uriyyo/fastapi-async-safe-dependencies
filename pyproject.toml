[tool.poetry]
name = "fastapi-async-safe-dependencies"
version = "0.1.0"
description = "FastAPI async safe dependencies"
authors = [
    "Yurii Karabas <1998uriyyo@gmail.com>",
]

license = "MIT"
readme = "README.md"
repository = "https://github.com/uriyyo/fastapi-async-safe-dependencies"

classifiers = [
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3 :: Only',
]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.109.0"
typing-extensions = "^4.9.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
ruff = "^0.1.14"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
httpx = "^0.26.0"
asgi-lifespan = "^2.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "S", # flake8-bandit
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TRY", # tryceratops
    "RUF", # ruff specific rules
]
ignore = [
    "B008", # do not perform function calls in argument defaults
    "S101", # use of assert detected
    "PT004", # fixture doesn't return anything
    "PT013", # allow from pytest import thing
    "SIM114", # allow have multiplie ifs with same body
    "TRY003", # allow long exc message
    "RUF100", # allow unused noqa
    "RUF012", # allow mutable class var
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
]
per-file-ignores = { }
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
python_version = 3.8
strict = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_reexport = false
show_column_numbers = true
show_error_codes = true

[tool.coverage.paths]
source = ["fastapi_pagination"]

[tool.coverage.run]
source = ["fastapi_pagination"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@overload",
    "if TYPE_CHECKING:",
]
